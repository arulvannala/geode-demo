version: '3.2'

services:

  # *********** #
  #    Geode    #
  # *********** #

  locator:
    image: apachegeode/geode
    container_name: locator
    hostname: locator.localhost
    networks:
      default:
        aliases: [locator.localhost]
    expose:
      - "10334"
      - "1099"
      - "7575"
    ports:
      - "1099:1099"
      - "10334:10334"
      - "7575:7575"
      - "7070:7070"
    volumes:
      - ./docker/:/docker/
    command: /docker/geode/gfshWrapper.sh gfsh start locator --name=locator.localhost --mcast-port=0

  server:
    image: apachegeode/geode
    depends_on: [locator]
    container_name: server
    hostname: server.localhost
    networks:
      default:
        aliases: [server.localhost]
    links:
      - locator:locator
    expose:
      - "40404"
      - "1099"
    ports:
      - "40404:40404"
      - "7071:7070"
    volumes:
      - ./docker/:/docker/
    command: /docker/geode/startServer.sh --server-port=40404 --max-heap=1G

  geode-config:
    image: alpine
    depends_on: [server, locator]
    container_name: geode-config
    volumes:
      - ./docker:/docker
    command: docker/geode/setup.sh

  # ************************* #
  #    MongoDB Replica Set    #
  # ************************* #
  mongodb-primary:
    image: mongo:4.0
    container_name: mongodb-primary
    hostname: mongodb-primary
    ports:
      - "27017:27017"
    restart: always
    environment:
      - MONGODB_ADVERTISED_HOSTNAME=mongodb-primary
      - MONGODB_REPLICA_SET_MODE=primary
      - MONGODB_REPLICA_SET_NAME=rs0
    entrypoint: [ "/usr/bin/mongod", "--bind_ip_all", "--replSet", "rs0"]

  mongodb-secondary:
    image: mongo:4.0
    container_name: mongodb-secondary
    hostname: mongodb-secondary
    depends_on:
      - mongodb-primary
    ports:
      - "27018:27017"
    restart: always
    environment:
      - MONGODB_ADVERTISED_HOSTNAME=mongodb-secondary
      - MONGODB_REPLICA_SET_MODE=secondary
      - MONGODB_PRIMARY_HOST=mongodb-primary
      - MONGODB_PRIMARY_PORT_NUMBER=27017
      - MONGODB_REPLICA_SET_NAME=rs0
    entrypoint: [ "/usr/bin/mongod", "--bind_ip_all", "--replSet", "rs0"]

  mongodb-arbiter:
    image: mongo:4.0
    container_name: mongodb-arbiter
    hostname: mongodb-arbiter
    depends_on:
      - mongodb-primary
    ports:
      - "27019:27017"
    restart: always
    environment:
      - MONGODB_ADVERTISED_HOSTNAME=mongodb-arbiter
      - MONGODB_REPLICA_SET_MODE=arbiter
      - MONGODB_PRIMARY_HOST=mongodb-primary
      - MONGODB_PRIMARY_PORT_NUMBER=27017
      - MONGODB_REPLICA_SET_NAME=rs0
    entrypoint: [ "/usr/bin/mongod", "--bind_ip_all", "--replSet", "rs0"]

  mongodb-setup:
    image: mongo:4.0
    container_name: mongodb-setup
    depends_on: ["mongodb-primary", "mongodb-secondary", "mongodb-arbiter"]
    volumes:
      - ./docker/mongodb-replicaset:/scripts
    entrypoint: [ "/scripts/setup.sh" ]

  # ************************************* #
  #  CP Kafka, Zookeeper, Control Center  #
  # ************************************* #
  zookeeper:
    image: confluentinc/cp-zookeeper:5.2.1
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  broker:
    image: confluentinc/cp-enterprise-kafka:5.2.1
    hostname: broker
    container_name: broker
    depends_on:
      - zookeeper
    ports:
      - "29092:29092"
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: broker:29092
      CONFLUENT_METRICS_REPORTER_ZOOKEEPER_CONNECT: zookeeper:2181
      CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
      CONFLUENT_METRICS_ENABLE: 'true'
      CONFLUENT_SUPPORT_CUSTOMER_ID: 'anonymous'

  control-center:
    image: confluentinc/cp-enterprise-control-center:5.2.1
    hostname: control-center
    container_name: control-center
    depends_on:
      - zookeeper
      - broker
    ports:
      - "9021:9021"
    environment:
      CONTROL_CENTER_BOOTSTRAP_SERVERS: 'broker:29092'
      CONTROL_CENTER_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      CONTROL_CENTER_REPLICATION_FACTOR: 1
      CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
      CONFLUENT_METRICS_TOPIC_REPLICATION: 1
      PORT: 9021

  scdf:
    image: springcloud/spring-cloud-dataflow-server-local:1.7.0.RELEASE
    hostname: scdf.local
    container_name: scdf
    depends_on: [config-server]
    ports:
      - "9393:9393"
      - "9995-9998:9995-9998"
    volumes:
      - ~/.m2:/root/.m2
    environment:
      - spring.cloud.deployer.local.javaOpts=-Dspring.profiles.active=docker
      - spring.cloud.dataflow.applicationProperties.stream.spring.profiles.include=docker

      - spring.cloud.dataflow.applicationProperties.stream.spring.cloud.stream.kafka.binder.brokers=kafka.localhost:9092
      - spring.cloud.dataflow.applicationProperties.stream.spring.cloud.stream.kafka.binder.zkNodes=kafka.localhost:2181

      #- spring.datasource.url=jdbc:postgresql://db1.localhost:5432/scdf
      #- spring.datasource.username=scdf
      #- spring.datasource.password=scdf
      #- spring.datasource.driver-class-name=org.postgresql.Driver

  scdf-config:
    image: alpine
    depends_on: [scdf]
    volumes:
      - ./docker:/docker
    command: docker/scdf/setup.sh

  config-server:
    image: hyness/spring-cloud-config-server
    hostname: config-server.local
    container_name: config-server
    ports:
      - "8888:8888"
    volumes:
      - ./cloud-config:/config
    environment:
      - SPRING_PROFILES_ACTIVE=native
      - SPRING_CLOUD_CONFIG_SERVER_NATIVE_ADDLABELLOCATIONS=false
  schema-registry:
    image: confluent/schema-registry
    hostname: schema-registry
    depends_on:
      - broker
      - zookeeper
    environment:
      SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL: 'localhost:2181'
      SCHEMA_REGISTRY_HOST_NAME: schema-registry

    restart: always

    ports:
      - "8081:8081"

