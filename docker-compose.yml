version: '3'

services:
#  locator:
#    image: apachegeode/geode
#    container_name: locator
#    hostname: locator.localhost
#
#    expose:
#      - "10334"
#      - "1099"
#      - "7575"
#    #  - "1024"
#    ports:
#      - "1099:1099"
#      - "10334:10334"
#      - "7575:7575"
#      - "7070:7070"
#    volumes:
#      - ./docker/:/docker/
#    command: /docker/geode/gfshWrapper.sh gfsh start locator --name=locator.localhost --mcast-port=0
#
#  server:
#    image: apachegeode/geode
#    container_name: server
#    hostname: server.localhost
#    depends_on: [locator]
#    links:
#      - locator:locator
#    expose:
#      - "8080"
#      - "40404"
#      - "1099"
#    ports:
#      - "40404:40404"
#      - "7071:7070"
#    volumes:
#      - ./docker/:/docker/
#    command: /docker/geode/startServer.sh --server-port=40404 --max-heap=1G
#
#  geode-config:
#    image: alpine
#    depends_on: [server, locator]
#    container_name: geode-config
#    volumes:
#      - ./docker:/docker
#    command: docker/geode/setup.sh

  mysql:
    image: mysql:5.7.25
    environment:
      MYSQL_DATABASE: dataflow
      MYSQL_USER: root
      MYSQL_ROOT_PASSWORD: rootpw
    expose:
      - 3306
  kafka:
    image: landoop/fast-data-dev:1.1.0
    container_name: kafka
    environment:
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1
      - SAMPLEDATA=0
      - RUNTESTS=0
    ports:
      - "2181:2181"
      - "9092:9092"
      - "3030:3030"
      - "8081:8081"

  dataflow-server:
    image: springcloud/spring-cloud-dataflow-server:2.1.2.RELEASE
    container_name: dataflow-server
    ports:
      - "9393:9393"
    environment:
      - spring.cloud.dataflow.applicationProperties.stream.spring.cloud.stream.kafka.binder.brokers=PLAINTEXT://kafka:9092
      - spring.cloud.dataflow.applicationProperties.stream.spring.cloud.stream.kafka.streams.binder.brokers=PLAINTEXT://kafka:9092
      - spring.cloud.dataflow.applicationProperties.stream.spring.cloud.stream.kafka.binder.zkNodes=zookeeper:2181
      - spring.cloud.dataflow.applicationProperties.stream.spring.cloud.stream.kafka.streams.binder.zkNodes=zookeeper:2181
      - spring.cloud.skipper.client.serverUri=http://skipper-server:7577/api
      - spring.cloud.dataflow.applicationProperties.stream.management.metrics.export.prometheus.enabled=true
      - spring.cloud.dataflow.applicationProperties.stream.spring.cloud.streamapp.security.enabled=false
      - spring.cloud.dataflow.applicationProperties.stream.management.endpoints.web.exposure.include=prometheus,info,health
      - spring.cloud.dataflow.grafana-info.url=http://localhost:3000
      - SPRING_DATASOURCE_URL=jdbc:mysql://mysql:3306/dataflow
      - SPRING_DATASOURCE_USERNAME=root
      - SPRING_DATASOURCE_PASSWORD=rootpw
      - SPRING_DATASOURCE_DRIVER_CLASS_NAME=org.mariadb.jdbc.Driver
    depends_on:
      - kafka

  app-import:
    image: springcloud/openjdk:latest
    depends_on:
      - dataflow-server
    command: >
      /bin/sh -c "
        while ! nc -z dataflow-server 9393;
        do
          sleep 1;
        done;
        wget -qO- 'http://dataflow-server:9393/apps' --post-data='uri=http://bit.ly/Einstein-SR2-stream-applications-kafka-maven&force=true';
        echo 'Stream apps imported'
        wget -qO- 'http://dataflow-server:9393/apps' --post-data='uri=http://bit.ly/Dearborn-SR1-task-applications-maven&force=true';
        echo 'Task apps imported'"

  skipper-server:
    image: springcloud/spring-cloud-skipper-server:2.0.3.RELEASE
    container_name: skipper
    ports:
      - "7577:7577"
      - "9000-9010:9000-9010"
      - "9997:9997"
      - "9998:9998"
      - "20000-20105:20000-20105"
    environment:
      - SPRING_CLOUD_SKIPPER_SERVER_PLATFORM_LOCAL_ACCOUNTS_DEFAULT_PORTRANGE_LOW=20000
      - SPRING_CLOUD_SKIPPER_SERVER_PLATFORM_LOCAL_ACCOUNTS_DEFAULT_PORTRANGE_HIGH=20100
      - SPRING_DATASOURCE_URL=jdbc:mysql://mysql:3306/dataflow
      - SPRING_DATASOURCE_USERNAME=root
      - SPRING_DATASOURCE_PASSWORD=rootpw
      - SPRING_DATASOURCE_DRIVER_CLASS_NAME=org.mariadb.jdbc.Driver

  # Grafana is configured with the Prometheus datasource.
  # Use `docker exec -it prometheus /bin/sh` to logging in the container
#  prometheus:
#    image: springcloud/spring-cloud-dataflow-prometheus-local:${DATAFLOW_VERSION:?DATAFLOW_VERSION is not set! Use 'export DATAFLOW_VERSION=local-server-image-tag'}
#    container_name: 'prometheus'
#    volumes:
#      - 'scdf-targets:/etc/prometheus/'
#    ports:
#      - '9090:9090'
#    depends_on:
#      - service-discovery
#
#  # The service-discovery container. Required for Prometheus setup only
#  # Use `docker exec -it service-discovery /bin/sh` to logging the container
#  service-discovery:
#    image: springcloud/spring-cloud-dataflow-prometheus-service-discovery:0.0.4.RELEASE
#    container_name: 'service-discovery'
#    volumes:
#      - 'scdf-targets:/tmp/scdf-targets/'
#    expose:
#      - '8181'
#    ports:
#      - '8181:8181'
#    environment:
#      - metrics.prometheus.target.cron=0/20 * * * * *
#      - metrics.prometheus.target.filePath=/tmp/scdf-targets/targets.json
#      - metrics.prometheus.target.discoveryUrl=http://dataflow-server:9393/runtime/apps
#      - metrics.prometheus.target.overrideIp=skipper-server
#      - server.port=8181
#    depends_on:
#      - dataflow-server
#
#  # Grafana SCDF Prometheus pre-built image:
#  grafana:
#    image: springcloud/spring-cloud-dataflow-grafana-prometheus:${DATAFLOW_VERSION:?DATAFLOW_VERSION is not set! Use 'export DATAFLOW_VERSION=local-server-image-tag'}
#    container_name: 'grafana'
#    ports:
#      - '3000:3000'

volumes:
  scdf-targets:
